
import streamlit as st
import plotly.express as px
import pandas as pd

def display_summary_statistics(df):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
    st.header("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    st.write(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: **{len(df):,}**")
    st.write(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: **{df['user_id'].nunique():,}**")
    st.write(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã: **{df['region'].nunique():,}**")
    st.write(f"–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: **{df['timestamp'].min()}** ‚Äî **{df['timestamp'].max()}**")

def apply_filters(df):
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö."""
    st.sidebar.title("‚öôÔ∏è –§–∏–ª—å—Ç—Ä—ã")
    region_filter = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω—ã", df['region'].unique(), default=df['region'].unique())
    device_filter = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", df['device_type'].unique(), default=df['device_type'].unique())
    date_range = st.sidebar.date_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç", [df['timestamp'].min(), df['timestamp'].max()])

    filtered_df = df[
        (df['region'].isin(region_filter)) &
        (df['device_type'].isin(device_filter)) &
        (df['timestamp'].dt.date.between(date_range[0], date_range[1]))
    ]
    st.sidebar.write(f"üîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(filtered_df):,}")
    return filtered_df

def render_region_analysis(filtered_df):
    """–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º."""
    st.header("–ê–Ω–∞–ª–∏–∑ —Ä–µ–≥–∏–æ–Ω–æ–≤")
    region_counts = filtered_df['region'].value_counts()
    fig_region = px.bar(region_counts, x=region_counts.index, y=region_counts.values,
                        labels={'x': '–†–µ–≥–∏–æ–Ω', 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π'},
                        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
    st.plotly_chart(fig_region)

def render_qoe_metrics(filtered_df):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ QoE."""
    st.header("–ú–µ—Ç—Ä–∏–∫–∏ QoE (–ö–∞—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞)")
    qoe_metrics = {
        "–°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (–º—Å)": filtered_df['initial_playback_delay_ms'].mean(),
        "–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∏–±—É—Ñ–µ—Ä–æ–≤": filtered_df['rebuffer_count'].mean(),
        "–û–±—â–µ–µ –≤—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ (–º—Å)": filtered_df['total_stall_duration_ms'].mean(),
        "–°—Ä–µ–¥–Ω–∏–π –±–∏—Ç—Ä–µ–π—Ç (–ö–±–∏—Ç/—Å)": filtered_df['average_bitrate_kbps'].mean(),
    }
    for metric, value in qoe_metrics.items():
        st.write(f"**{metric}:** {value:.2f}")

def render_playback_delay_histogram(filtered_df):
    """–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è."""
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
    fig_delay = px.histogram(filtered_df, x='initial_playback_delay_ms', nbins=30,
                             title="–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (–º—Å)",
                             labels={'initial_playback_delay_ms': '–ó–∞–¥–µ—Ä–∂–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (–º—Å)'})
    st.plotly_chart(fig_delay)

def render_time_series_analysis(filtered_df, time_group):
    """–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞."""
    time_metrics = filtered_df.groupby('time_group').agg({
        'initial_playback_delay_ms': 'mean',
        'rebuffer_count': 'mean',
        'average_bitrate_kbps': 'mean'
    }).reset_index()

    st.subheader("–°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (–º—Å) –≤–æ –≤—Ä–µ–º–µ–Ω–∏")
    fig_delay_time = px.line(time_metrics, x='time_group', y='initial_playback_delay_ms',
                             title="–°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏",
                             labels={'time_group': '–í—Ä–µ–º—è', 'initial_playback_delay_ms': '–ó–∞–¥–µ—Ä–∂–∫–∞ (–º—Å)'})
    st.plotly_chart(fig_delay_time)

    st.subheader("–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∏–±—É—Ñ–µ—Ä–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–∏")
    fig_rebuffer_time = px.line(time_metrics, x='time_group', y='rebuffer_count',
                                title="–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∏–±—É—Ñ–µ—Ä–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–∏",
                                labels={'time_group': '–í—Ä–µ–º—è', 'rebuffer_count': '–†–∏–±—É—Ñ–µ—Ä—ã'})
    st.plotly_chart(fig_rebuffer_time)

    st.subheader("–°—Ä–µ–¥–Ω–∏–π –±–∏—Ç—Ä–µ–π—Ç (–ö–±–∏—Ç/—Å) –≤–æ –≤—Ä–µ–º–µ–Ω–∏")
    fig_bitrate_time = px.line(time_metrics, x='time_group', y='average_bitrate_kbps',
                               title="–°—Ä–µ–¥–Ω–∏–π –±–∏—Ç—Ä–µ–π—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–∏",
                               labels={'time_group': '–í—Ä–µ–º—è', 'average_bitrate_kbps': '–ë–∏—Ç—Ä–µ–π—Ç (–ö–±–∏—Ç/—Å)'})
    st.plotly_chart(fig_bitrate_time)

def render_comparison_chart(time_metrics, metrics_to_compare):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–∏."""
    st.header("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–∏")
    if metrics_to_compare:
        fig_compare = px.line(
            time_metrics,
            x='time_group',
            y=metrics_to_compare,
            title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–∏",
            labels={'time_group': '–í—Ä–µ–º—è', 'value': '–ó–Ω–∞—á–µ–Ω–∏–µ', 'variable': '–ú–µ—Ç—Ä–∏–∫–∞'},
            markers=True
        )
        fig_compare.update_traces(mode="lines+markers")
        st.plotly_chart(fig_compare)
    else:
        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –º–µ—Ç—Ä–∏–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")

def format_ranges(thresholds, reverse=False):
    if reverse:
        return f"< {thresholds['good']}", f"{thresholds['good']}‚Äì{thresholds['average']}", f"{thresholds['average']}‚Äì{thresholds['bad']}", f"> {thresholds['bad']}"
    else:
        return f"> {thresholds['good']}", f"{thresholds['average']}‚Äì{thresholds['good']}", f"{thresholds['bad']}‚Äì{thresholds['average']}", f"< {thresholds['bad']}"

def display_settings_tables(settings, params_translation):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –≤–∏–¥–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü."""
    st.write("### –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
    st.subheader("–ü–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º:")
    for device, params in settings["device"].items():
        st.markdown(f"#### **{device}**")
        device_data = []
        for param, thresholds in params.items():
            device_data.append(
                [params_translation[param], *format_ranges(thresholds, reverse=(param != "average_bitrate_kbps"))]
            )
        device_df = pd.DataFrame(
            device_data, columns=["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–•–æ—Ä–æ—à–æ", "–°—Ä–µ–¥–Ω–µ", "–ü–ª–æ—Ö–æ", "–ö—Ä–∏—Ç–∏—á–Ω–æ"]
        )
        st.table(device_df)

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    st.subheader("–ü–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    for duration, params in settings["duration"].items():
        st.markdown(f"#### **{duration.capitalize()}**")
        duration_data = []
        for param, thresholds in params.items():
            duration_data.append(
                [params_translation[param], *format_ranges(thresholds, reverse=(param != "average_bitrate_kbps"))]
            )
        duration_df = pd.DataFrame(
            duration_data, columns=["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–•–æ—Ä–æ—à–æ", "–°—Ä–µ–¥–Ω–µ", "–ü–ª–æ—Ö–æ", "–ö—Ä–∏—Ç–∏—á–Ω–æ"]
        )
        st.table(duration_df)


def display_settings_editor(settings, params_translation, tab_name):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ Streamlit —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–æ—Ä–º—ã."""
    st.header(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ {tab_name}")
    for category, params in settings[tab_name].items():
        with st.expander(f"{tab_name.capitalize()}: {category}"):
            # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            with st.form(key=f"{tab_name}_{category}_form"):
                for param, thresholds in params.items():
                    STEP = 100 if param != "rebuffer_count" else 1
                    st.write(f"**{params_translation[param]}**:")
                    col1, col2, col3 = st.columns(3)
                    thresholds["good"] = col1.number_input(
                        "–•–æ—Ä–æ—à–æ", value=thresholds["good"], step=STEP, key=f"{category}_{param}_good"
                    )
                    thresholds["average"] = col2.number_input(
                        "–°—Ä–µ–¥–Ω–µ", value=thresholds["average"], step=STEP, key=f"{category}_{param}_average"
                    )
                    thresholds["bad"] = col3.number_input(
                        "–ü–ª–æ—Ö–æ", value=thresholds["bad"], step=STEP, key=f"{category}_{param}_bad"
                    )
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º—É
                submitted = st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
                if submitted:
                    st.success(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {category} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
