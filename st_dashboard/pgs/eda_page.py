# import streamlit as st
# from utils.data_loader import load_data
# from utils.ui_components import display_summary_statistics, apply_filters, render_region_analysis, render_qoe_metrics, render_playback_delay_histogram

# def render_page():
#     st.title("üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö ClickHouse")

#     # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
#     df = load_data()

#     # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#     display_summary_statistics(df)

#     # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
#     filtered_df = apply_filters(df)

#     # –ê–Ω–∞–ª–∏–∑ —Ä–µ–≥–∏–æ–Ω–æ–≤
#     render_region_analysis(filtered_df)

#     # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ QoE
#     render_qoe_metrics(filtered_df)

#     # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã
#     render_playback_delay_histogram(filtered_df)

import streamlit as st
from utils.data_loader import load_data
from utils.formulas import calculate_user_experience
from utils.ui_components import (
    display_summary_statistics,
    apply_filters,
    render_region_analysis,
    render_qoe_metrics,
    render_playback_delay_histogram,
    render_time_series_analysis,
    render_comparison_chart
)
import pandas as pd

from utils.settings_manager import load_settings
rules = load_settings()

def render_page():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã EDA."""
    st.title("üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö ClickHouse")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = load_data()

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    display_summary_statistics(df)

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filtered_df = apply_filters(df)

    memory_coefficient = st.sidebar.slider("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–ª–æ–ø–∞–º—è—Ç–Ω–æ—Å—Ç–∏", 1, 5, 3)
    filtered_df = calculate_user_experience(filtered_df, rules['device'], rules['duration'], memory_coefficient)

    st.sidebar.success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –¥–∞–Ω–Ω—ã–º.")

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–≥–∏–æ–Ω–æ–≤
    render_region_analysis(filtered_df)

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ QoE
    render_qoe_metrics(filtered_df)

    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    render_playback_delay_histogram(filtered_df)

    # –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
    st.header("üìà –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏")
    time_group = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–≥—Ä–µ–≥–∞—Ü–∏–∏:", ['–î–µ–Ω—å', '–ß–∞—Å'], index=0)

    if time_group == '–î–µ–Ω—å':
        filtered_df['time_group'] = pd.to_datetime(filtered_df['timestamp']).dt.date
    else:
        filtered_df['time_group'] = pd.to_datetime(filtered_df['timestamp']).dt.floor('H')

    render_time_series_analysis(filtered_df, time_group)

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
    time_metrics = filtered_df.groupby('time_group').agg({
        'initial_playback_delay_ms': 'mean',
        'rebuffer_count': 'mean',
        'average_bitrate_kbps': 'mean',
        'user_experience': 'mean'
    }).reset_index()

    metrics_to_compare = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:",
        ['initial_playback_delay_ms', 'rebuffer_count', 'average_bitrate_kbps', 'user_experience'],
        default=['initial_playback_delay_ms', 'user_experience']
    )
    render_comparison_chart(time_metrics, metrics_to_compare)